import { Note, QuizResult } from '../types';

// Helper function to escape HTML special characters
const escapeHtml = (text: string): string => {
  const div = document.createElement('div');
  div.textContent = text;
  return div.innerHTML;
};

// Export notes as PDF using browser print
export const exportNotesAsPDF = (note: Note) => {
  const printWindow = window.open('', '_blank');
  if (!printWindow) {
    alert('Please allow popups to export PDF');
    return;
  }

  // Ensure bulletPoints is an array and filter out empty points
  const bulletPoints = Array.isArray(note.bulletPoints) 
    ? note.bulletPoints.filter(point => point && point.trim()) 
    : [];

  console.log('Exporting notes to PDF:', {
    contentTitle: note.contentTitle,
    totalPoints: bulletPoints.length,
    points: bulletPoints
  });

  const htmlContent = `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="UTF-8">
      <title>${escapeHtml(note.contentTitle)} - Learning Notes</title>
      <style>
        * {
          box-sizing: border-box;
        }
        body {
          font-family: Arial, sans-serif;
          max-width: 800px;
          margin: 40px auto;
          padding: 20px;
          line-height: 1.6;
          color: #333;
        }
        h1 {
          color: #2563eb;
          border-bottom: 3px solid #2563eb;
          padding-bottom: 10px;
          margin-bottom: 20px;
          word-wrap: break-word;
        }
        h2 {
          color: #1e40af;
          margin-top: 30px;
          margin-bottom: 15px;
        }
        .meta {
          color: #666;
          font-size: 14px;
          margin-bottom: 30px;
          line-height: 1.8;
        }
        .meta strong {
          color: #333;
        }
        ul {
          list-style-type: none;
          padding: 0;
          margin: 0;
        }
        li {
          padding: 15px;
          margin: 12px 0;
          background: #f3f4f6;
          border-left: 4px solid #2563eb;
          border-radius: 4px;
          page-break-inside: avoid;
          line-height: 1.7;
          word-wrap: break-word;
          overflow-wrap: break-word;
        }
        .point-number {
          display: inline-block;
          width: 28px;
          height: 28px;
          background: #2563eb;
          color: white;
          border-radius: 50%;
          text-align: center;
          line-height: 28px;
          font-weight: bold;
          font-size: 14px;
          margin-right: 12px;
          flex-shrink: 0;
          vertical-align: middle;
        }
        .point-content {
          display: inline;
          vertical-align: middle;
        }
        .footer {
          margin-top: 50px;
          padding-top: 20px;
          border-top: 1px solid #ddd;
          text-align: center;
          color: #666;
          font-size: 12px;
        }
        .total-count {
          background: #eff6ff;
          border: 1px solid #2563eb;
          border-radius: 6px;
          padding: 10px 15px;
          margin-bottom: 20px;
          color: #1e40af;
          font-weight: 500;
        }
        @media print {
          body {
            margin: 0;
            padding: 20px;
          }
          li {
            page-break-inside: avoid;
          }
        }
      </style>
    </head>
    <body>
      <h1>${escapeHtml(note.contentTitle)}</h1>
      <div class="meta">
        <strong>Video:</strong> ${escapeHtml(note.videoTitle)}<br>
        <strong>Channel:</strong> ${escapeHtml(note.channelTitle)}<br>
        <strong>Date:</strong> ${new Date(note.createdAt || Date.now()).toLocaleDateString()}
      </div>
      <h2>Learning Notes</h2>
      <div class="total-count">
        üìù Total Key Points: ${bulletPoints.length}
      </div>
      <ul>
        ${bulletPoints.map((point, idx) => `
          <li>
            <span class="point-number">${idx + 1}</span>
            <span class="point-content">${escapeHtml(point)}</span>
          </li>
        `).join('')}
      </ul>
      <div class="footer">
        Generated by Smart Quiz Generator | ${new Date().toLocaleDateString()}
      </div>
    </body>
    </html>
  `;

  printWindow.document.write(htmlContent);
  printWindow.document.close();
  
  // Wait for content to load then print
  printWindow.onload = () => {
    printWindow.print();
  };
};

// Export quiz results as PDF
export const exportQuizResultAsPDF = (result: QuizResult) => {
  // Validate input data
  if (!result || !result.userAnswers) {
    console.error('Invalid quiz result data:', result);
    alert('Cannot export PDF: Invalid quiz data');
    return;
  }

  const printWindow = window.open('', '_blank');
  if (!printWindow) {
    alert('Please allow popups to export PDF');
    return;
  }

  // Safe calculation with fallback
  const totalQuestions = result.totalQuestions || 0;
  const correctAnswers = result.correctAnswers || 0;
  const percentage = totalQuestions > 0 
    ? ((correctAnswers / totalQuestions) * 100).toFixed(1) 
    : '0.0';
  const passed = parseFloat(percentage) >= 60;
  
  // Get quiz title safely
  const quizTitle = result.quiz?.title || result.videoTitle || 'Quiz Results';

  const htmlContent = `
    <!DOCTYPE html>
    <html>
    <head>
      <title>Quiz Results - ${escapeHtml(quizTitle)}</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          max-width: 800px;
          margin: 40px auto;
          padding: 20px;
          line-height: 1.6;
          color: #333;
        }
        h1 {
          color: #2563eb;
          border-bottom: 3px solid #2563eb;
          padding-bottom: 10px;
          margin-bottom: 20px;
        }
        .score-card {
          background: ${passed ? '#dcfce7' : '#fee2e2'};
          border: 2px solid ${passed ? '#16a34a' : '#dc2626'};
          border-radius: 8px;
          padding: 20px;
          margin: 20px 0;
          text-align: center;
        }
        .score-card h2 {
          color: ${passed ? '#16a34a' : '#dc2626'};
          margin: 0;
          font-size: 48px;
        }
        .score-card p {
          margin: 10px 0 0 0;
          font-size: 18px;
        }
        .question {
          margin: 30px 0;
          padding: 20px;
          background: #f9fafb;
          border-radius: 8px;
          page-break-inside: avoid;
          border: 1px solid #e5e7eb;
        }
        .question-header {
          font-weight: bold;
          color: #1e40af;
          margin-bottom: 15px;
          font-size: 16px;
          line-height: 1.5;
        }
        .options {
          margin: 15px 0;
        }
        .option {
          padding: 12px 15px;
          margin: 10px 0;
          border-radius: 6px;
          border: 2px solid #e5e7eb;
          background: white;
          line-height: 1.6;
        }
        .option strong {
          color: #374151;
          margin-right: 8px;
        }
        .option.correct {
          background: #dcfce7;
          border-color: #16a34a;
        }
        .option.correct strong {
          color: #16a34a;
        }
        .option.incorrect {
          background: #fee2e2;
          border-color: #dc2626;
        }
        .option.incorrect strong {
          color: #dc2626;
        }
        .option.selected {
          font-weight: 500;
        }
        .explanation {
          margin-top: 10px;
          padding: 10px;
          background: #eff6ff;
          border-left: 4px solid #2563eb;
          border-radius: 4px;
          font-size: 14px;
        }
        .footer {
          margin-top: 50px;
          padding-top: 20px;
          border-top: 1px solid #ddd;
          text-align: center;
          color: #666;
          font-size: 12px;
        }
        @media print {
          body { margin: 0; padding: 20px; }
          .question { page-break-inside: avoid; }
        }
      </style>
    </head>
    <body>
      <h1>Quiz Results: ${escapeHtml(quizTitle)}</h1>
      <div class="score-card">
        <h2>${percentage}%</h2>
        <p>${correctAnswers} out of ${totalQuestions} correct</p>
        <p><strong>${passed ? 'PASSED ‚úì' : 'NEEDS IMPROVEMENT'}</strong></p>
      </div>
      
      <h2>Detailed Results</h2>
      ${(() => {
        // Handle different quiz data structures
        const questions = result.quiz?.questions || result.questions || [];
        
        if (questions.length === 0) {
          return '<p class="text-gray-600">No questions available</p>';
        }
        
        return questions.map((q: any, idx: number) => {
          const userAnswer = result.userAnswers.find((ua: any) => ua.questionIndex === idx);
          const isCorrect = userAnswer?.isCorrect || false;
          
          return `
            <div class="question">
              <div class="question-header">Question ${idx + 1}: ${escapeHtml(q.question || '')}</div>
              <div class="options">
                ${(q.options || []).map((opt: string, optIdx: number) => {
                  // Map index to letter (0->A, 1->B, 2->C, 3->D)
                  const optLetter = String.fromCharCode(65 + optIdx);
                  const isUserAnswer = userAnswer?.selectedAnswer === optLetter;
                  const isCorrectAnswer = q.correct_answer === optLetter;
                  let className = 'option';
                  if (isCorrectAnswer) className += ' correct';
                  if (isUserAnswer && !isCorrect) className += ' incorrect';
                  if (isUserAnswer) className += ' selected';
                  
                  return `<div class="${className}"><strong>${optLetter})</strong> ${escapeHtml(opt)} ${isCorrectAnswer ? '‚úì Correct' : ''} ${isUserAnswer ? '(Your answer)' : ''}</div>`;
                }).join('')}
              </div>
              ${q.explanation ? `<div class="explanation"><strong>Explanation:</strong> ${escapeHtml(q.explanation)}</div>` : ''}
            </div>
          `;
        }).join('');
      })()}
      
      <div class="footer">
        Completed on ${new Date(result.completedAt).toLocaleString()}<br>
        Generated by Smart Quiz Generator
      </div>
    </body>
    </html>
  `;

  printWindow.document.write(htmlContent);
  printWindow.document.close();
  
  printWindow.onload = () => {
    printWindow.print();
  };
};
